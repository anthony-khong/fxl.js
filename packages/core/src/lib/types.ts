///////////////////////////////////////////////////////////////////////////////
// Generics
///////////////////////////////////////////////////////////////////////////////
type Opaque<K, T> = T & { __TYPE__: K };

///////////////////////////////////////////////////////////////////////////////
// Interfaces
///////////////////////////////////////////////////////////////////////////////
export interface Error {
  error: string;
}

export type Value = string | number | boolean;

export interface Coord {
  row: number;
  col: number;
  sheet?: string;
}

export type ValidCoord = Opaque<'ValidCoord', Coord>;

export type Style = Record<string, unknown>;

export interface Cell {
  value: Value;
  coord: Coord;
  style?: Style;
}

export type ValidCell = Opaque<'ValidCell', Cell>;

///////////////////////////////////////////////////////////////////////////////
// Type Guards
///////////////////////////////////////////////////////////////////////////////
export function isError(obj: unknown): obj is Error {
  if (typeof obj === 'object') {
    return 'error' in obj;
  }
  return false;
}
